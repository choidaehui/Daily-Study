
CSS: Essentials

1. box-sizing
   ctrl + shift + i => 개발툴 사용
예) .box {
     box-sizing: content-box;
     -> padding값 border값과 관계없이 박스 크기가 유지
           }
     .box {
     box-sizing: border-box;
     -> padding값 border값에 따라 박스 크기가 작아짐
           }

2. absolulate vs relative vs static(기본값)
예) .box {
     position: relative;
     top: 30px;
     left: 10px;
     -> 원래 있던 자리에서 위에서 30px, 왼쪽에서 10px만큼 박스가 이동
	}
     .box {
     position: absolute;
     top: 30px;
     left: 10px;
     -> 원래 있던 자리에서 빠져나와 근접한 부모중에서 기본 값이 static이 아닌
         부모의 기준에서 위에서 30px, 왼쪽에서 10px 이동하고, 원래있던 박스는 
         재배치 된다.

3. sticky vs fixed
예) .box {
    position: sticky;
    top: 0px;
    left: 0px;
    -> 들어있는 부모 박스 안에서 포지션이 결정
    -> 스크롤을 해도 포지션 유지
    .box {
    position: fixed;
    top: 20px;
    left: 20px;
    -> 부모와 상관없이 기존의 문서에서 나와 상대적으로 뷰포트에서 포지션이 결정

4. 중앙정렬 방법
 ㄱ. 플렉스 박스 -> justify-content(중심축에서 정렬) -> align-items(반대축에서 정렬)
 ㄴ. margin: auto; (수평축에서 margin을 골고루 분배하여 중앙 정렬)
 ㄷ. text-align: center; (수평축에서 정렬)
    -> 블럭레벨 -> margin: auto; -> text-align: center;
    이유: 블럭레벨은 블럭당 여백에 margin이 있기 때문에
 ㄹ. transform: translate(50%, 50%); (x축, y축 중앙 정렬)
 ㅁ. 예) .box h1 {
	 	text-align: center;
                        line-height: 100px(박스 원래 높이);
	           -> 텍스트가 박스안에서 수평축, 수직축에서 중앙 정렬 됨.

5. background(반응형)
 예) .box {
	   background-image: url('https://media~~~');
	   background-repeat: no-repeat; (배경이미지 반복x)
	   background-position: center; (배경 중앙 이미지 배치)
	   background-size: cover; (배경 이미지 남은 공간을 커버 함)
	}
      .box {
	   background: centr/cover no-repeat
		         url('https://media~~~~');
	}

6. transform
 예) .box {
	 transform: translatex(100px);
	-> x축에서 오른쪽으로 100px 이동
	 transform: translate(50px, -20px);
	-> x축에서 오른쪽으로 50px, 위쪽으로 20px 이동
	transaform: rotate(45deg);
	-> 박스가 45도 회전
	transform: scale(1.2);
	-> 박스 크기가 1.2배 커짐
	}
      .box {
	  transform: translate(100px, 100px) scale(2) rotate(40deg);
	        }

7. transition
 예) .box1:hover {
		background-color: blueviolet;
		transition-property: background-color;
		transition-duration: 300ms;
		transition-timing-function: linear;
	        }
      .box1:hover {
		transition: background-color 30ms linear;
	         }

      .box2:hover {
		border-radius: 50%;
		background-color: cornflowerblue;
		transition: all 300ms ease;
	참고-> cubic-bezier.com (트랜지션 애니메이션 적용할 때)

8. CSS 변수 정의
 custom properties
 --custom; 

 예) .first-list {
		--font-size: 32px; -> CSS 변수 정의
		  font-size: var(--font-size); -> CSS 변수 사용
		              var(--font-size, 16); -> 정의된 변수 값이 없을 때 
					      기본 값 16px로 지정
    :root {		
		--background-color: thistle;
		--base-space: 8px;
		-> 모든 요소에서 사용 가능
	}
 예) .second-list {

		margin-left: calc(var (--base-space) * 2 );
		-> calc 이용하여 2배 증가
	        }
 예) @media screen and (max-width: 768px) {

		:root {
			--background-color: salmon;
			--text-color: blue;
			--base-space: 4px;
		       }
					}
      -> 반응형 사이트 일때도 :root{ }를 이용하여 그대로 적용하거나 변경할 수 있음

9. data 속성
 예) data-*
     <div data-index="1" data-display-name="dream"></div>
     -> HTML에서 data 속성 사용 예 

     div[ data-display-name = 'dream' ] {
	background-color: beige;
	}
     -> CSS에서 data 속성 사용 예
 예) const dream = document.queryselector('div[data-display-name="dream"]');
     console.log(dream.dataset);
     => displayName: "dream"
          index: "1"
 -> 데이터 속성은 사용자에게 공개할 수 있는 정보만 사용(민감 정보 사용 x)
    이유) 정보가 노출될 가능성 크다

log --graph --all --pretty=format:'%C(yellow)[%ad]%C(reset) %C(green)[%h]%C(reset) | %C(white)%s %C(bold red){{%an}}%C(reset) %C(blue)%d%C(reset)' --date=short

-> git hist alias




